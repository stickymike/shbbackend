### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Event {
  duration: Float!
  endDateUTC: DateTime!
  id: ID!
  isAllDay: Boolean!
  isRecurring: Boolean!
  name: String!
  recurPattern: String
  startDateUTC: DateTime!
}

input EventCreateInput {
  duration: Float!
  endDateUTC: DateTime!
  id: ID
  isAllDay: Boolean
  isRecurring: Boolean
  name: String!
  recurPattern: String
  startDateUTC: DateTime!
}

input EventOrderByInput {
  duration: OrderByArg
  endDateUTC: OrderByArg
  id: OrderByArg
  isAllDay: OrderByArg
  isRecurring: OrderByArg
  name: OrderByArg
  recurPattern: OrderByArg
  startDateUTC: OrderByArg
}

input EventUpdateInput {
  duration: Float
  endDateUTC: DateTime
  id: ID
  isAllDay: Boolean
  isRecurring: Boolean
  name: String
  recurPattern: String
  startDateUTC: DateTime
}

input EventWhereInput {
  AND: [EventWhereInput!]
  duration: FloatFilter
  endDateUTC: DateTimeFilter
  id: StringFilter
  isAllDay: BooleanFilter
  isRecurring: BooleanFilter
  name: StringFilter
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  recurPattern: NullableStringFilter
  startDateUTC: DateTimeFilter
}

input EventWhereUniqueInput {
  id: ID
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  clockcodetouser(code: Int): User!
  createEvent(data: EventCreateInput!): Event!
  createPunchCard(data: PunchCardCreateInput!): PunchCard!
  createTimeRequest(duration: Int!, isAllDay: Boolean!, name: String!, recurPattern: String, startDateUTC: String!): Event!
  createTimeRole(data: TimeRoleCreateInput!): TimeRole!
  createUser(code: Int!, email: String!, firstName: String!, lastName: String!, password: String!, title: String): User!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deletePunchCard(where: PunchCardWhereUniqueInput!): PunchCard
  deleteTimeRole(id: ID): TimeRole!
  deleteUser(where: UserWhereUniqueInput!): User
  resetPassword(id: ID, password: String): User!
  signin(email: String, password: String): User!
  signout: String!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updatePunchCard(data: PunchCardUpdateInput!, where: PunchCardWhereUniqueInput!): PunchCard
  updateTimeRole(data: TimeRoleUpdateInput!, where: TimeRoleWhereUniqueInput!): TimeRole
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

enum Permissions {
  ADMIN
  TIMECARDEDITOR
  TIMECARDVIEWER
  USER
}

type PunchCard {
  createdAt: DateTime!
  id: ID!
  punchIn: DateTime!
  punchOut: DateTime!
  timeRole: TimeRole!
  updatedAt: DateTime!
  user: User!
}

input PunchCardCreateInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime!
  punchOut: DateTime!
  timeRole: TimeRoleCreateOneWithoutTimeRoleInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PunchCardCreateManyWithoutPunchCardsInput {
  connect: [PunchCardWhereUniqueInput!]
  create: [PunchCardCreateWithoutTimeRoleInput!]
}

input PunchCardCreateWithoutTimeRoleInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime!
  punchOut: DateTime!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PunchCardCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime!
  punchOut: DateTime!
  timeRole: TimeRoleCreateOneWithoutTimeRoleInput!
  updatedAt: DateTime
}

input PunchCardFilter {
  every: PunchCardWhereInput
  none: PunchCardWhereInput
  some: PunchCardWhereInput
}

input PunchCardOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  punchIn: OrderByArg
  punchOut: OrderByArg
  updatedAt: OrderByArg
}

input PunchCardScalarWhereInput {
  AND: [PunchCardScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PunchCardScalarWhereInput!]
  OR: [PunchCardScalarWhereInput!]
  punchIn: DateTimeFilter
  punchOut: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PunchCardUpdateInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  timeRole: TimeRoleUpdateOneRequiredWithoutPunchCardsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPunchCardsInput
}

input PunchCardUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  updatedAt: DateTime
}

input PunchCardUpdateManyWithoutTimeRoleInput {
  connect: [PunchCardWhereUniqueInput!]
  create: [PunchCardCreateWithoutTimeRoleInput!]
  delete: [PunchCardWhereUniqueInput!]
  deleteMany: [PunchCardScalarWhereInput!]
  disconnect: [PunchCardWhereUniqueInput!]
  set: [PunchCardWhereUniqueInput!]
  update: [PunchCardUpdateWithWhereUniqueWithoutTimeRoleInput!]
  updateMany: [PunchCardUpdateManyWithWhereNestedInput!]
  upsert: [PunchCardUpsertWithWhereUniqueWithoutTimeRoleInput!]
}

input PunchCardUpdateManyWithoutUserInput {
  connect: [PunchCardWhereUniqueInput!]
  create: [PunchCardCreateWithoutUserInput!]
  delete: [PunchCardWhereUniqueInput!]
  deleteMany: [PunchCardScalarWhereInput!]
  disconnect: [PunchCardWhereUniqueInput!]
  set: [PunchCardWhereUniqueInput!]
  update: [PunchCardUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PunchCardUpdateManyWithWhereNestedInput!]
  upsert: [PunchCardUpsertWithWhereUniqueWithoutUserInput!]
}

input PunchCardUpdateManyWithWhereNestedInput {
  data: PunchCardUpdateManyDataInput!
  where: PunchCardScalarWhereInput!
}

input PunchCardUpdateWithoutTimeRoleDataInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPunchCardsInput
}

input PunchCardUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  timeRole: TimeRoleUpdateOneRequiredWithoutPunchCardsInput
  updatedAt: DateTime
}

input PunchCardUpdateWithWhereUniqueWithoutTimeRoleInput {
  data: PunchCardUpdateWithoutTimeRoleDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardUpdateWithWhereUniqueWithoutUserInput {
  data: PunchCardUpdateWithoutUserDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardUpsertWithWhereUniqueWithoutTimeRoleInput {
  create: PunchCardCreateWithoutTimeRoleInput!
  update: PunchCardUpdateWithoutTimeRoleDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardUpsertWithWhereUniqueWithoutUserInput {
  create: PunchCardCreateWithoutUserInput!
  update: PunchCardUpdateWithoutUserDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardWhereInput {
  AND: [PunchCardWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PunchCardWhereInput!]
  OR: [PunchCardWhereInput!]
  punchIn: DateTimeFilter
  punchOut: DateTimeFilter
  timeRole: TimeRoleWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input PunchCardWhereUniqueInput {
  id: ID
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(after: ID, before: ID, first: Int, last: Int, orderBy: EventOrderByInput, skip: Int, where: EventWhereInput): [Event!]!
  me: User
  punchCard(where: PunchCardWhereUniqueInput!): PunchCard
  punchCards(after: ID, before: ID, first: Int, last: Int, orderBy: PunchCardOrderByInput, skip: Int, where: PunchCardWhereInput): [PunchCard!]!
  test: [String!]!
  timeRoles(after: ID, before: ID, first: Int, last: Int, orderBy: TimeRoleOrderByInput, skip: Int, where: TimeRoleWhereInput): [TimeRole!]!
  users(after: ID, before: ID, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type TimeRole {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  payRate: Int!
  shortName: String!
  updatedAt: DateTime!
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

input TimeRoleCreateInput {
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  payRate: Int!
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  shortName: String!
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
}

input TimeRoleCreateManyWithoutTimeRolesInput {
  connect: [TimeRoleWhereUniqueInput!]
  create: [TimeRoleCreateWithoutUsersInput!]
}

input TimeRoleCreateOneWithoutTimeRoleInput {
  connect: TimeRoleWhereUniqueInput
  create: TimeRoleCreateWithoutPunchCardsInput
}

input TimeRoleCreateWithoutPunchCardsInput {
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  payRate: Int!
  shortName: String!
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
}

input TimeRoleCreateWithoutUsersInput {
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  payRate: Int!
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  shortName: String!
  updatedAt: DateTime
}

input TimeRoleFilter {
  every: TimeRoleWhereInput
  none: TimeRoleWhereInput
  some: TimeRoleWhereInput
}

input TimeRoleOrderByInput {
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  name: OrderByArg
  payRate: OrderByArg
  shortName: OrderByArg
  updatedAt: OrderByArg
}

input TimeRoleScalarWhereInput {
  AND: [TimeRoleScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [TimeRoleScalarWhereInput!]
  OR: [TimeRoleScalarWhereInput!]
  payRate: IntFilter
  punchCards: PunchCardFilter
  shortName: StringFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input TimeRoleUpdateInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  punchCards: PunchCardUpdateManyWithoutTimeRoleInput
  shortName: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutTimeRolesInput
}

input TimeRoleUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  shortName: String
  updatedAt: DateTime
}

input TimeRoleUpdateManyWithoutUsersInput {
  connect: [TimeRoleWhereUniqueInput!]
  create: [TimeRoleCreateWithoutUsersInput!]
  delete: [TimeRoleWhereUniqueInput!]
  deleteMany: [TimeRoleScalarWhereInput!]
  disconnect: [TimeRoleWhereUniqueInput!]
  set: [TimeRoleWhereUniqueInput!]
  update: [TimeRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [TimeRoleUpdateManyWithWhereNestedInput!]
  upsert: [TimeRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input TimeRoleUpdateManyWithWhereNestedInput {
  data: TimeRoleUpdateManyDataInput!
  where: TimeRoleScalarWhereInput!
}

input TimeRoleUpdateOneRequiredWithoutPunchCardsInput {
  connect: TimeRoleWhereUniqueInput
  create: TimeRoleCreateWithoutPunchCardsInput
  update: TimeRoleUpdateWithoutPunchCardsDataInput
  upsert: TimeRoleUpsertWithoutPunchCardsInput
}

input TimeRoleUpdateWithoutPunchCardsDataInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  shortName: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutTimeRolesInput
}

input TimeRoleUpdateWithoutUsersDataInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  punchCards: PunchCardUpdateManyWithoutTimeRoleInput
  shortName: String
  updatedAt: DateTime
}

input TimeRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: TimeRoleUpdateWithoutUsersDataInput!
  where: TimeRoleWhereUniqueInput!
}

input TimeRoleUpsertWithoutPunchCardsInput {
  create: TimeRoleCreateWithoutPunchCardsInput!
  update: TimeRoleUpdateWithoutPunchCardsDataInput!
}

input TimeRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: TimeRoleCreateWithoutUsersInput!
  update: TimeRoleUpdateWithoutUsersDataInput!
  where: TimeRoleWhereUniqueInput!
}

input TimeRoleWhereInput {
  AND: [TimeRoleWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [TimeRoleWhereInput!]
  OR: [TimeRoleWhereInput!]
  payRate: IntFilter
  punchCards: PunchCardFilter
  shortName: StringFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input TimeRoleWhereUniqueInput {
  id: ID
}

type User {
  clockedIn: String!
  code: Int!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  permissions: [Permissions!]!
  recentTimeRoleId: String!
  timeRoles(after: ID, before: ID, first: Int, last: Int, skip: Int): [TimeRole!]!
  title: String
  updatedAt: DateTime!
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTimeRolesInput!]
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPunchCardsInput
}

input UserCreatepermissionsInput {
  set: [Permissions!]
}

input UserCreateWithoutPunchCardsInput {
  code: Int!
  createdAt: DateTime
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  permissions: UserCreatepermissionsInput
  timeRoles: TimeRoleCreateManyWithoutTimeRolesInput
  title: String
  updatedAt: DateTime
}

input UserCreateWithoutTimeRolesInput {
  code: Int!
  createdAt: DateTime
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  permissions: UserCreatepermissionsInput
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  title: String
  updatedAt: DateTime
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  code: OrderByArg
  createdAt: OrderByArg
  email: OrderByArg
  firstName: OrderByArg
  id: OrderByArg
  lastName: OrderByArg
  password: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  code: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  punchCards: PunchCardFilter
  timeRoles: TimeRoleFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
}

input UserUpdateInput {
  code: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  punchCards: PunchCardUpdateManyWithoutUserInput
  timeRoles: TimeRoleUpdateManyWithoutUsersInput
  title: String
  updatedAt: DateTime
}

input UserUpdateManyDataInput {
  code: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  title: String
  updatedAt: DateTime
}

input UserUpdateManyWithoutTimeRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTimeRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTimeRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTimeRolesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutPunchCardsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPunchCardsInput
  update: UserUpdateWithoutPunchCardsDataInput
  upsert: UserUpsertWithoutPunchCardsInput
}

input UserUpdatepermissionsInput {
  set: [Permissions!]
}

input UserUpdateWithoutPunchCardsDataInput {
  code: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  timeRoles: TimeRoleUpdateManyWithoutUsersInput
  title: String
  updatedAt: DateTime
}

input UserUpdateWithoutTimeRolesDataInput {
  code: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  punchCards: PunchCardUpdateManyWithoutUserInput
  title: String
  updatedAt: DateTime
}

input UserUpdateWithWhereUniqueWithoutTimeRolesInput {
  data: UserUpdateWithoutTimeRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutPunchCardsInput {
  create: UserCreateWithoutPunchCardsInput!
  update: UserUpdateWithoutPunchCardsDataInput!
}

input UserUpsertWithWhereUniqueWithoutTimeRolesInput {
  create: UserCreateWithoutTimeRolesInput!
  update: UserUpdateWithoutTimeRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  code: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  punchCards: PunchCardFilter
  timeRoles: TimeRoleFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  code: Int
  email: String
  id: ID
}
