### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  clockcodetouser(code: Int): User!
  createOneTask(data: TaskCreateInput!): Task!
  createOneTaskGroup(data: TaskGroupCreateInput!): TaskGroup!
  createPunchCard(data: PunchCardCreateInput!): PunchCard!
  createTimeRequest(data: TimeRequestCreateInput!): TimeRequest!
  createTimeRole(data: TimeRoleCreateInput!): TimeRole!
  createUser(code: Int!, email: String!, firstName: String!, lastName: String!, password: String!, title: String): User!
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneTaskGroup(where: TaskGroupWhereUniqueInput!): TaskGroup
  deletePunchCard(where: PunchCardWhereUniqueInput!): PunchCard
  deleteTimeRequest(where: TimeRequestWhereUniqueInput!): TimeRequest
  deleteTimeRole(id: ID): TimeRole!
  deleteUser(where: UserWhereUniqueInput!): User
  resetPassword(id: ID, password: String): User!
  signin(email: String, password: String): User!
  signout: String!
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneTaskGroup(data: TaskGroupUpdateInput!, where: TaskGroupWhereUniqueInput!): TaskGroup
  updatePunchCard(data: PunchCardUpdateInput!, where: PunchCardWhereUniqueInput!): PunchCard
  updateTimeRequest(data: TimeRequestUpdateInput!, where: TimeRequestWhereUniqueInput!): TimeRequest
  updateTimeRole(data: TimeRoleUpdateInput!, where: TimeRoleWhereUniqueInput!): TimeRole
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

enum Permissions {
  ADMIN
  TIMECARDEDITOR
  TIMECARDVIEWER
  USER
}

type PunchCard {
  createdAt: DateTime!
  id: ID!
  punchIn: DateTime!
  punchOut: DateTime!
  timeRole: TimeRole!
  updatedAt: DateTime!
  user: User!
}

input PunchCardCreateInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime!
  punchOut: DateTime!
  timeRole: TimeRoleCreateOneWithoutTimeRoleInput!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PunchCardCreateManyWithoutPunchCardsInput {
  connect: [PunchCardWhereUniqueInput!]
  create: [PunchCardCreateWithoutTimeRoleInput!]
}

input PunchCardCreateWithoutTimeRoleInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime!
  punchOut: DateTime!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input PunchCardCreateWithoutUserInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime!
  punchOut: DateTime!
  timeRole: TimeRoleCreateOneWithoutTimeRoleInput!
  updatedAt: DateTime
}

input PunchCardFilter {
  every: PunchCardWhereInput
  none: PunchCardWhereInput
  some: PunchCardWhereInput
}

input PunchCardOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  punchIn: OrderByArg
  punchOut: OrderByArg
  updatedAt: OrderByArg
}

input PunchCardScalarWhereInput {
  AND: [PunchCardScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PunchCardScalarWhereInput!]
  OR: [PunchCardScalarWhereInput!]
  punchIn: DateTimeFilter
  punchOut: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PunchCardUpdateInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  timeRole: TimeRoleUpdateOneRequiredWithoutPunchCardsInput
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPunchCardsInput
}

input PunchCardUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  updatedAt: DateTime
}

input PunchCardUpdateManyWithoutTimeRoleInput {
  connect: [PunchCardWhereUniqueInput!]
  create: [PunchCardCreateWithoutTimeRoleInput!]
  delete: [PunchCardWhereUniqueInput!]
  deleteMany: [PunchCardScalarWhereInput!]
  disconnect: [PunchCardWhereUniqueInput!]
  set: [PunchCardWhereUniqueInput!]
  update: [PunchCardUpdateWithWhereUniqueWithoutTimeRoleInput!]
  updateMany: [PunchCardUpdateManyWithWhereNestedInput!]
  upsert: [PunchCardUpsertWithWhereUniqueWithoutTimeRoleInput!]
}

input PunchCardUpdateManyWithoutUserInput {
  connect: [PunchCardWhereUniqueInput!]
  create: [PunchCardCreateWithoutUserInput!]
  delete: [PunchCardWhereUniqueInput!]
  deleteMany: [PunchCardScalarWhereInput!]
  disconnect: [PunchCardWhereUniqueInput!]
  set: [PunchCardWhereUniqueInput!]
  update: [PunchCardUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PunchCardUpdateManyWithWhereNestedInput!]
  upsert: [PunchCardUpsertWithWhereUniqueWithoutUserInput!]
}

input PunchCardUpdateManyWithWhereNestedInput {
  data: PunchCardUpdateManyDataInput!
  where: PunchCardScalarWhereInput!
}

input PunchCardUpdateWithoutTimeRoleDataInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutPunchCardsInput
}

input PunchCardUpdateWithoutUserDataInput {
  createdAt: DateTime
  id: ID
  punchIn: DateTime
  punchOut: DateTime
  timeRole: TimeRoleUpdateOneRequiredWithoutPunchCardsInput
  updatedAt: DateTime
}

input PunchCardUpdateWithWhereUniqueWithoutTimeRoleInput {
  data: PunchCardUpdateWithoutTimeRoleDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardUpdateWithWhereUniqueWithoutUserInput {
  data: PunchCardUpdateWithoutUserDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardUpsertWithWhereUniqueWithoutTimeRoleInput {
  create: PunchCardCreateWithoutTimeRoleInput!
  update: PunchCardUpdateWithoutTimeRoleDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardUpsertWithWhereUniqueWithoutUserInput {
  create: PunchCardCreateWithoutUserInput!
  update: PunchCardUpdateWithoutUserDataInput!
  where: PunchCardWhereUniqueInput!
}

input PunchCardWhereInput {
  AND: [PunchCardWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PunchCardWhereInput!]
  OR: [PunchCardWhereInput!]
  punchIn: DateTimeFilter
  punchOut: DateTimeFilter
  timeRole: TimeRoleWhereInput
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input PunchCardWhereUniqueInput {
  id: ID
}

type Query {
  me: User
  punchCard(where: PunchCardWhereUniqueInput!): PunchCard
  punchCards(after: ID, before: ID, first: Int, last: Int, orderBy: PunchCardOrderByInput, skip: Int, where: PunchCardWhereInput): [PunchCard!]!
  taskGroup(where: TaskGroupWhereUniqueInput!): TaskGroup
  taskGroups(after: ID, before: ID, first: Int, last: Int, orderBy: TaskGroupOrderByInput, skip: Int, where: TaskGroupWhereInput): [TaskGroup!]!
  tasks(after: ID, before: ID, first: Int, last: Int, skip: Int): [Task!]!
  test(where: UserWhereInput): [User!]!
  timeRequest(where: TimeRequestWhereUniqueInput!): TimeRequest
  timeRequests(after: ID, before: ID, first: Int, last: Int, orderBy: TimeRequestOrderByInput, skip: Int, where: TimeRequestWhereInput): [TimeRequest!]!
  timeRoles(after: ID, before: ID, first: Int, last: Int, orderBy: TimeRoleOrderByInput, skip: Int, where: TimeRoleWhereInput): [TimeRole!]!
  users(after: ID, before: ID, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  childrenTasks(after: ID, before: ID, first: Int, last: Int, skip: Int): [Task!]!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input TaskCreateInput {
  childrenTasks: TaskCreateManyWithoutChildrenTasksInput
  createdAt: DateTime
  id: ID
  name: String!
  parentTask: TaskCreateOneWithoutParentTaskInput
  taskGroup: TaskGroupCreateOneWithoutTaskGroupInput
  updatedAt: DateTime
}

input TaskCreateManyWithoutChildrenTasksInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutParentTaskInput!]
}

input TaskCreateManyWithoutTasksInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutTaskGroupInput!]
}

input TaskCreateOneWithoutParentTaskInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutChildrenTasksInput
}

input TaskCreateWithoutChildrenTasksInput {
  createdAt: DateTime
  id: ID
  name: String!
  parentTask: TaskCreateOneWithoutParentTaskInput
  taskGroup: TaskGroupCreateOneWithoutTaskGroupInput
  updatedAt: DateTime
}

input TaskCreateWithoutParentTaskInput {
  childrenTasks: TaskCreateManyWithoutChildrenTasksInput
  createdAt: DateTime
  id: ID
  name: String!
  taskGroup: TaskGroupCreateOneWithoutTaskGroupInput
  updatedAt: DateTime
}

input TaskCreateWithoutTaskGroupInput {
  childrenTasks: TaskCreateManyWithoutChildrenTasksInput
  createdAt: DateTime
  id: ID
  name: String!
  parentTask: TaskCreateOneWithoutParentTaskInput
  updatedAt: DateTime
}

input TaskFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskGroup {
  createdAt: DateTime!
  id: ID!
  name: String!
  tasks(after: ID, before: ID, first: Int, last: Int, skip: Int): [Task!]!
  updatedAt: DateTime!
}

input TaskGroupCreateInput {
  createdAt: DateTime
  id: ID
  name: String!
  tasks: TaskCreateManyWithoutTasksInput
  updatedAt: DateTime
}

input TaskGroupCreateOneWithoutTaskGroupInput {
  connect: TaskGroupWhereUniqueInput
  create: TaskGroupCreateWithoutTasksInput
}

input TaskGroupCreateWithoutTasksInput {
  createdAt: DateTime
  id: ID
  name: String!
  updatedAt: DateTime
}

input TaskGroupOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input TaskGroupUpdateInput {
  createdAt: DateTime
  id: ID
  name: String
  tasks: TaskUpdateManyWithoutTaskGroupInput
  updatedAt: DateTime
}

input TaskGroupUpdateOneWithoutTasksInput {
  connect: TaskGroupWhereUniqueInput
  create: TaskGroupCreateWithoutTasksInput
  delete: Boolean
  disconnect: Boolean
  update: TaskGroupUpdateWithoutTasksDataInput
  upsert: TaskGroupUpsertWithoutTasksInput
}

input TaskGroupUpdateWithoutTasksDataInput {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input TaskGroupUpsertWithoutTasksInput {
  create: TaskGroupCreateWithoutTasksInput!
  update: TaskGroupUpdateWithoutTasksDataInput!
}

input TaskGroupWhereInput {
  AND: [TaskGroupWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [TaskGroupWhereInput!]
  OR: [TaskGroupWhereInput!]
  tasks: TaskFilter
  updatedAt: DateTimeFilter
}

input TaskGroupWhereUniqueInput {
  id: ID
}

input TaskOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  childrenTasks: TaskFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input TaskUpdateInput {
  childrenTasks: TaskUpdateManyWithoutParentTaskInput
  createdAt: DateTime
  id: ID
  name: String
  parentTask: TaskUpdateOneWithoutChildrenTasksInput
  taskGroup: TaskGroupUpdateOneWithoutTasksInput
  updatedAt: DateTime
}

input TaskUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input TaskUpdateManyWithoutParentTaskInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutParentTaskInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutParentTaskInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutParentTaskInput!]
}

input TaskUpdateManyWithoutTaskGroupInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutTaskGroupInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutTaskGroupInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutTaskGroupInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  data: TaskUpdateManyDataInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateOneWithoutChildrenTasksInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutChildrenTasksInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutChildrenTasksDataInput
  upsert: TaskUpsertWithoutChildrenTasksInput
}

input TaskUpdateWithoutChildrenTasksDataInput {
  createdAt: DateTime
  id: ID
  name: String
  parentTask: TaskUpdateOneWithoutChildrenTasksInput
  taskGroup: TaskGroupUpdateOneWithoutTasksInput
  updatedAt: DateTime
}

input TaskUpdateWithoutParentTaskDataInput {
  childrenTasks: TaskUpdateManyWithoutParentTaskInput
  createdAt: DateTime
  id: ID
  name: String
  taskGroup: TaskGroupUpdateOneWithoutTasksInput
  updatedAt: DateTime
}

input TaskUpdateWithoutTaskGroupDataInput {
  childrenTasks: TaskUpdateManyWithoutParentTaskInput
  createdAt: DateTime
  id: ID
  name: String
  parentTask: TaskUpdateOneWithoutChildrenTasksInput
  updatedAt: DateTime
}

input TaskUpdateWithWhereUniqueWithoutParentTaskInput {
  data: TaskUpdateWithoutParentTaskDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutTaskGroupInput {
  data: TaskUpdateWithoutTaskGroupDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutChildrenTasksInput {
  create: TaskCreateWithoutChildrenTasksInput!
  update: TaskUpdateWithoutChildrenTasksDataInput!
}

input TaskUpsertWithWhereUniqueWithoutParentTaskInput {
  create: TaskCreateWithoutParentTaskInput!
  update: TaskUpdateWithoutParentTaskDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutTaskGroupInput {
  create: TaskCreateWithoutTaskGroupInput!
  update: TaskUpdateWithoutTaskGroupDataInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  childrenTasks: TaskFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  parentTask: TaskWhereInput
  taskGroup: TaskGroupWhereInput
  updatedAt: DateTimeFilter
}

input TaskWhereUniqueInput {
  id: ID
}

type TimeRequest {
  approved: Boolean
  createdAt: DateTime!
  endTime: DateTime!
  id: ID!
  isAllDay: Boolean!
  reason: String!
  startTime: DateTime!
  updatedAt: DateTime!
  user: User!
}

input TimeRequestCreateInput {
  approved: Boolean
  createdAt: DateTime
  endTime: DateTime!
  id: ID
  isAllDay: Boolean
  reason: String!
  startTime: DateTime!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input TimeRequestCreateManyWithoutEventsInput {
  connect: [TimeRequestWhereUniqueInput!]
  create: [TimeRequestCreateWithoutUserInput!]
}

input TimeRequestCreateWithoutUserInput {
  approved: Boolean
  createdAt: DateTime
  endTime: DateTime!
  id: ID
  isAllDay: Boolean
  reason: String!
  startTime: DateTime!
  updatedAt: DateTime
}

input TimeRequestFilter {
  every: TimeRequestWhereInput
  none: TimeRequestWhereInput
  some: TimeRequestWhereInput
}

input TimeRequestOrderByInput {
  approved: OrderByArg
  createdAt: OrderByArg
  endTime: OrderByArg
  id: OrderByArg
  isAllDay: OrderByArg
  reason: OrderByArg
  startTime: OrderByArg
  updatedAt: OrderByArg
}

input TimeRequestScalarWhereInput {
  AND: [TimeRequestScalarWhereInput!]
  approved: NullableBooleanFilter
  createdAt: DateTimeFilter
  endTime: DateTimeFilter
  id: StringFilter
  isAllDay: BooleanFilter
  NOT: [TimeRequestScalarWhereInput!]
  OR: [TimeRequestScalarWhereInput!]
  reason: StringFilter
  startTime: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TimeRequestUpdateInput {
  approved: Boolean
  createdAt: DateTime
  endTime: DateTime
  id: ID
  isAllDay: Boolean
  reason: String
  startTime: DateTime
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutEventsInput
}

input TimeRequestUpdateManyDataInput {
  approved: Boolean
  createdAt: DateTime
  endTime: DateTime
  id: ID
  isAllDay: Boolean
  reason: String
  startTime: DateTime
  updatedAt: DateTime
}

input TimeRequestUpdateManyWithoutUserInput {
  connect: [TimeRequestWhereUniqueInput!]
  create: [TimeRequestCreateWithoutUserInput!]
  delete: [TimeRequestWhereUniqueInput!]
  deleteMany: [TimeRequestScalarWhereInput!]
  disconnect: [TimeRequestWhereUniqueInput!]
  set: [TimeRequestWhereUniqueInput!]
  update: [TimeRequestUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TimeRequestUpdateManyWithWhereNestedInput!]
  upsert: [TimeRequestUpsertWithWhereUniqueWithoutUserInput!]
}

input TimeRequestUpdateManyWithWhereNestedInput {
  data: TimeRequestUpdateManyDataInput!
  where: TimeRequestScalarWhereInput!
}

input TimeRequestUpdateWithoutUserDataInput {
  approved: Boolean
  createdAt: DateTime
  endTime: DateTime
  id: ID
  isAllDay: Boolean
  reason: String
  startTime: DateTime
  updatedAt: DateTime
}

input TimeRequestUpdateWithWhereUniqueWithoutUserInput {
  data: TimeRequestUpdateWithoutUserDataInput!
  where: TimeRequestWhereUniqueInput!
}

input TimeRequestUpsertWithWhereUniqueWithoutUserInput {
  create: TimeRequestCreateWithoutUserInput!
  update: TimeRequestUpdateWithoutUserDataInput!
  where: TimeRequestWhereUniqueInput!
}

input TimeRequestWhereInput {
  AND: [TimeRequestWhereInput!]
  approved: NullableBooleanFilter
  createdAt: DateTimeFilter
  endTime: DateTimeFilter
  id: StringFilter
  isAllDay: BooleanFilter
  NOT: [TimeRequestWhereInput!]
  OR: [TimeRequestWhereInput!]
  reason: StringFilter
  startTime: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input TimeRequestWhereUniqueInput {
  id: ID
}

type TimeRole {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  payRate: Int!
  shortName: String!
  updatedAt: DateTime!
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

input TimeRoleCreateInput {
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  payRate: Int!
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  shortName: String!
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
}

input TimeRoleCreateManyWithoutTimeRolesInput {
  connect: [TimeRoleWhereUniqueInput!]
  create: [TimeRoleCreateWithoutUsersInput!]
}

input TimeRoleCreateOneWithoutTimeRoleInput {
  connect: TimeRoleWhereUniqueInput
  create: TimeRoleCreateWithoutPunchCardsInput
}

input TimeRoleCreateWithoutPunchCardsInput {
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  payRate: Int!
  shortName: String!
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
}

input TimeRoleCreateWithoutUsersInput {
  createdAt: DateTime
  description: String!
  id: ID
  name: String!
  payRate: Int!
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  shortName: String!
  updatedAt: DateTime
}

input TimeRoleFilter {
  every: TimeRoleWhereInput
  none: TimeRoleWhereInput
  some: TimeRoleWhereInput
}

input TimeRoleOrderByInput {
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  name: OrderByArg
  payRate: OrderByArg
  shortName: OrderByArg
  updatedAt: OrderByArg
}

input TimeRoleScalarWhereInput {
  AND: [TimeRoleScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [TimeRoleScalarWhereInput!]
  OR: [TimeRoleScalarWhereInput!]
  payRate: IntFilter
  punchCards: PunchCardFilter
  shortName: StringFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input TimeRoleUpdateInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  punchCards: PunchCardUpdateManyWithoutTimeRoleInput
  shortName: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutTimeRolesInput
}

input TimeRoleUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  shortName: String
  updatedAt: DateTime
}

input TimeRoleUpdateManyWithoutUsersInput {
  connect: [TimeRoleWhereUniqueInput!]
  create: [TimeRoleCreateWithoutUsersInput!]
  delete: [TimeRoleWhereUniqueInput!]
  deleteMany: [TimeRoleScalarWhereInput!]
  disconnect: [TimeRoleWhereUniqueInput!]
  set: [TimeRoleWhereUniqueInput!]
  update: [TimeRoleUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [TimeRoleUpdateManyWithWhereNestedInput!]
  upsert: [TimeRoleUpsertWithWhereUniqueWithoutUsersInput!]
}

input TimeRoleUpdateManyWithWhereNestedInput {
  data: TimeRoleUpdateManyDataInput!
  where: TimeRoleScalarWhereInput!
}

input TimeRoleUpdateOneRequiredWithoutPunchCardsInput {
  connect: TimeRoleWhereUniqueInput
  create: TimeRoleCreateWithoutPunchCardsInput
  update: TimeRoleUpdateWithoutPunchCardsDataInput
  upsert: TimeRoleUpsertWithoutPunchCardsInput
}

input TimeRoleUpdateWithoutPunchCardsDataInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  shortName: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutTimeRolesInput
}

input TimeRoleUpdateWithoutUsersDataInput {
  createdAt: DateTime
  description: String
  id: ID
  name: String
  payRate: Int
  punchCards: PunchCardUpdateManyWithoutTimeRoleInput
  shortName: String
  updatedAt: DateTime
}

input TimeRoleUpdateWithWhereUniqueWithoutUsersInput {
  data: TimeRoleUpdateWithoutUsersDataInput!
  where: TimeRoleWhereUniqueInput!
}

input TimeRoleUpsertWithoutPunchCardsInput {
  create: TimeRoleCreateWithoutPunchCardsInput!
  update: TimeRoleUpdateWithoutPunchCardsDataInput!
}

input TimeRoleUpsertWithWhereUniqueWithoutUsersInput {
  create: TimeRoleCreateWithoutUsersInput!
  update: TimeRoleUpdateWithoutUsersDataInput!
  where: TimeRoleWhereUniqueInput!
}

input TimeRoleWhereInput {
  AND: [TimeRoleWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [TimeRoleWhereInput!]
  OR: [TimeRoleWhereInput!]
  payRate: IntFilter
  punchCards: PunchCardFilter
  shortName: StringFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input TimeRoleWhereUniqueInput {
  id: ID
}

type User {
  clockedIn: String!
  code: Int!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  permissions: [Permissions!]!
  recentTimeRoleId: String!
  timeRoles(after: ID, before: ID, first: Int, last: Int, skip: Int): [TimeRole!]!
  title: String
  updatedAt: DateTime!
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTimeRolesInput!]
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPunchCardsInput
}

input UserCreatepermissionsInput {
  set: [Permissions!]
}

input UserCreateWithoutEventsInput {
  code: Int!
  createdAt: DateTime
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  permissions: UserCreatepermissionsInput
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  timeRoles: TimeRoleCreateManyWithoutTimeRolesInput
  title: String
  updatedAt: DateTime
}

input UserCreateWithoutPunchCardsInput {
  code: Int!
  createdAt: DateTime
  email: String!
  events: TimeRequestCreateManyWithoutEventsInput
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  permissions: UserCreatepermissionsInput
  timeRoles: TimeRoleCreateManyWithoutTimeRolesInput
  title: String
  updatedAt: DateTime
}

input UserCreateWithoutTimeRolesInput {
  code: Int!
  createdAt: DateTime
  email: String!
  events: TimeRequestCreateManyWithoutEventsInput
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  permissions: UserCreatepermissionsInput
  punchCards: PunchCardCreateManyWithoutPunchCardsInput
  title: String
  updatedAt: DateTime
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  code: OrderByArg
  createdAt: OrderByArg
  email: OrderByArg
  firstName: OrderByArg
  id: OrderByArg
  lastName: OrderByArg
  password: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  code: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  events: TimeRequestFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  punchCards: PunchCardFilter
  timeRoles: TimeRoleFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
}

input UserUpdateInput {
  code: Int
  createdAt: DateTime
  email: String
  events: TimeRequestUpdateManyWithoutUserInput
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  punchCards: PunchCardUpdateManyWithoutUserInput
  timeRoles: TimeRoleUpdateManyWithoutUsersInput
  title: String
  updatedAt: DateTime
}

input UserUpdateManyDataInput {
  code: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  title: String
  updatedAt: DateTime
}

input UserUpdateManyWithoutTimeRolesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTimeRolesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTimeRolesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTimeRolesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutEventsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEventsInput
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneRequiredWithoutPunchCardsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPunchCardsInput
  update: UserUpdateWithoutPunchCardsDataInput
  upsert: UserUpsertWithoutPunchCardsInput
}

input UserUpdatepermissionsInput {
  set: [Permissions!]
}

input UserUpdateWithoutEventsDataInput {
  code: Int
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  punchCards: PunchCardUpdateManyWithoutUserInput
  timeRoles: TimeRoleUpdateManyWithoutUsersInput
  title: String
  updatedAt: DateTime
}

input UserUpdateWithoutPunchCardsDataInput {
  code: Int
  createdAt: DateTime
  email: String
  events: TimeRequestUpdateManyWithoutUserInput
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  timeRoles: TimeRoleUpdateManyWithoutUsersInput
  title: String
  updatedAt: DateTime
}

input UserUpdateWithoutTimeRolesDataInput {
  code: Int
  createdAt: DateTime
  email: String
  events: TimeRequestUpdateManyWithoutUserInput
  firstName: String
  id: ID
  lastName: String
  password: String
  permissions: UserUpdatepermissionsInput
  punchCards: PunchCardUpdateManyWithoutUserInput
  title: String
  updatedAt: DateTime
}

input UserUpdateWithWhereUniqueWithoutTimeRolesInput {
  data: UserUpdateWithoutTimeRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutEventsInput {
  create: UserCreateWithoutEventsInput!
  update: UserUpdateWithoutEventsDataInput!
}

input UserUpsertWithoutPunchCardsInput {
  create: UserCreateWithoutPunchCardsInput!
  update: UserUpdateWithoutPunchCardsDataInput!
}

input UserUpsertWithWhereUniqueWithoutTimeRolesInput {
  create: UserCreateWithoutTimeRolesInput!
  update: UserUpdateWithoutTimeRolesDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  code: IntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  events: TimeRequestFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  punchCards: PunchCardFilter
  timeRoles: TimeRoleFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  code: Int
  email: String
  id: ID
}
