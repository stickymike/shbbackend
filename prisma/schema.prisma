generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = "postgresql://ccyleywleafutj:a89e2a184f59f70bb6a5ddef9f042f4cd95934195c4c31f3054e72ea216deb33@ec2-54-221-225-11.compute-1.amazonaws.com:5432/d4v0s437vieiac?sslaccept=accept_invalid_certs"
  enabled  = true
}

model User {
  id          String        @id @default(cuid())
  code        Int           @unique
  email       String        @unique
  password    String
  firstName   String
  lastName    String
  title       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  timeRoles   TimeRole[]
  punchCards  PunchCard[]
  permissions Permission[]
  events      TimeRequest[]
}

model PunchCard {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userID     String
  punchIn    DateTime
  punchOut   DateTime
  timeRole   TimeRole @relation(fields: [timeRoleId], references: [id])
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  userId     String
  timeRoleId String
}

model TimeRole {
  id          String      @id @default(cuid())
  name        String
  shortName   String
  description String
  payRate     Int
  users       User[]
  punchCards  PunchCard[]
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())
}

enum Permission {
  ADMIN
  USER
  TIMECARDVIEWER
  TIMECARDEDITOR
}

enum Punchtype {
  CLOCKIN
  CLOCKOUT
}

model TimeRequest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  reason    String
  approved  Boolean?
  startTime DateTime
  endTime   DateTime
  isAllDay  Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  userId    String
}

model TaskList {
  id        String   @id @default(cuid())
  name      String
  tasks     Task[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Task {
  id            String    @id @default(cuid())
  name          String
  orderRank     Float
  parentTask    Task?     @relation(name: "newTaskCheck")
  childrenTasks Task[]    @relation(name: "newTaskCheck")
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  TaskList      TaskList? @relation(fields: [taskListId], references: [id])
  taskListId    String?
  taskId        String?
}
