
// datasource mysql {
//   provider = "mysql"
//   url      = "mysql://root:prisma@localhost:3306/prisma"
//   enabled  = false
// }

// generator photon {
//   provider = "photonjs"
//   // binaryTargets = ["native"]
// }

generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = "postgresql://ccyleywleafutj:a89e2a184f59f70bb6a5ddef9f042f4cd95934195c4c31f3054e72ea216deb33@ec2-54-221-225-11.compute-1.amazonaws.com:5432/d4v0s437vieiac?sslaccept=accept_invalid_certs"
  enabled  = true

}

model User {
  id          String        @default(cuid()) @id
  code        Int           @unique
  email       String        @unique
  password    String
  firstName   String
  lastName    String
  title       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // timeCards   TimeCard[]
  timeRoles   TimeRole[]
  punchCards  PunchCard[]
  // group: [UserGroup]
  permissions Permission[]
  events      TimeRequest[]
}

model PunchCard {
  id        String   @default(cuid()) @id
  user      User
  punchIn   DateTime
  punchOut  DateTime
  timeRole  TimeRole
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model TimeRole {
  id          String      @default(cuid()) @id
  name        String
  shortName   String
  description String
  payRate     Int
  users       User[]
  // timeCards   TimeCard[]
  punchCards  PunchCard[]
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())
}

enum Permission {
  ADMIN USER TIMECARDVIEWER TIMECARDEDITOR
}

enum Punchtype {
  CLOCKIN CLOCKOUT
}

model TimeRequest {
  id        String   @default(cuid()) @id
  user      User
  reason    String
  approved  Boolean?
  startTime DateTime
  endTime   DateTime
  isAllDay  Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model TaskList {
  id        String   @default(cuid()) @id
  name      String
  tasks     Task[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Task {
  id            String   @default(cuid()) @id
  name          String
  orderRank     Float
  parentTask    Task?    @relation(name: "newTaskCheck")
  childrenTasks Task[]   @relation(name: "newTaskCheck")
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
}