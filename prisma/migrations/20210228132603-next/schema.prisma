generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url = "***"
  enabled  = true
}

model User {
  id          String        @id @default(cuid())
  code        Int           @unique
  email       String        @unique
  password    String
  firstName   String
  lastName    String
  title       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  timeRoles   TimeRole[]    @relation(references: [id])
  punchCards  PunchCard[]
  permissions Permission[]
  events      TimeRequest[]
}

model PunchCard {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userID     String
  punchIn    DateTime
  punchOut   DateTime
  timeRole   TimeRole @relation(fields: [timeRoleId], references: [id])
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  userId     String
  timeRoleId String
}

model TimeRole {
  id          String      @id @default(cuid())
  name        String
  shortName   String
  description String
  payRate     Int
  users       User[]      @relation(references: [id])
  punchCards  PunchCard[]
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())
}

enum Permission {
  ADMIN
  USER
  TIMECARDVIEWER
  TIMECARDEDITOR
}

enum Punchtype {
  CLOCKIN
  CLOCKOUT
}

model TimeRequest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  reason    String
  approved  Boolean?
  startTime DateTime
  endTime   DateTime
  isAllDay  Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  userId    String
}

// model TaskList {
//   id        String   @id @default(cuid())
//   name      String
//   tasks     Task[]
//   updatedAt DateTime @updatedAt
//   createdAt DateTime @default(now())
// }

// model Task {
//   id            String    @id @default(cuid())
//   name          String
//   orderRank     Float
//   parentTask    Task?     @relation(name: "newTaskCheck")
//   childrenTasks Task[]    @relation(name: "newTaskCheck")
//   updatedAt     DateTime  @updatedAt
//   createdAt     DateTime  @default(now())
//   TaskList      TaskList? @relation(fields: [taskListId], references: [id])
//   taskListId    String?
//   taskId        String?
// }
